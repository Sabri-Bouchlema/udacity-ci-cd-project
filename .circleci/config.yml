version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: sabri
          template: basic_fail_1
      
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm i
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm i
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
             cd frontend
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command: |
             cd backend
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=UdaPeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=UdaPeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters Name=tag:project,Values=UdaPeople \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            
            curl -H "Content-Type: text/plain" \
            -H "token: backend-ip-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip

            echo $BACKEND_IP >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:80:43:71:e2:84:9f:b9:f1:86:74:d9:d8:d8:ce:76"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            echo NODE_ENV=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION  >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR  >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES  >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST  >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT  >>.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME  >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD  >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE  >> .env
            npm run migrations >> migration-result.txt
      - run:
          name: Send migration results to memstash
          command: |
            migrationResult=1
            
            if grep "has been executed successfully" migration-result.txt
            then
              migrationResult=0
            fi

            curl -H "Content-Type: text/plain" \
            -H "token: migration-result-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$migrationResult" https://api.memstash.io/values/migrationResult
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum -y install nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: backend-ip-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend-ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:80:43:71:e2:84:9f:b9:f1:86:74:d9:d8:d8:ce:76"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure] 
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]